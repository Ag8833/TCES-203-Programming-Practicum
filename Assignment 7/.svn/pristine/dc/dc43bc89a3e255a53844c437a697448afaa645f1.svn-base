/*
 * Andrew Gates
 * 5/20/2015
 * TCES 203
 * Assignment #6
 *
 * This program contains the functions to be used in conjunction with main.cpp, Node.cpp, Node.h, List.cpp, List.h,
 * Queue.cpp, Queue.h and Stack.cpp to create objects of type Queue and containing the functions to pop, push,
 * and to print the queue.
 */

#ifndef STACK_H_
#define STACK_H_

#include "List.h"

template <class T>
class Stack : public List<T>
{
	public:
		Stack();//Default constructor.
		void pushStack(Node<T>*);//Function prototype to push a node to the stack.
		void popStack();//Function prototype to pop a node from the stack.
		void printStack();//Function prototype to print the stack.
		friend ostream &operator<<(ostream &, Stack<string>*);//Function prototype to overload <<.
};

//Default constructor.
template <class T>
Stack<T>::Stack()
{
	List<T>::listFront = NULL;
	List<T>::listBack = NULL;
	List<T>::listSize = 0;
}

//Function definition to push a node to the stack.
template <class T>
void Stack<T>::pushStack(Node<T>* newNode)
{
	this->addFirst(newNode);
}

//Function definition to pop a node from the stack.
template <class T>
void Stack<T>::popStack()
{
	int test = this->isEmpty();

	if(test == 1)
	{
		cout << "The stack is empty!" << endl;
		return;
	}

	this->removeFirst();
}

//Function definition to print the stack.
template <class T>
void Stack<T>::printStack()
{
	Node<string>* tempNode = this->listFront;
	int i;

	if (tempNode == NULL)
	{
		cout << "The stack is empty" << endl;
		return;
	}

	if (tempNode != NULL)
	{
		cout << "Top -> " << tempNode->getNodeName();

		if ((this->getListSize()) > 1)
		{
			for (i = 1; i < this->getListSize(); i++)
			{
				tempNode = tempNode->getNodeNext();
				if (tempNode->getNodeNext() == NULL)
				{
					cout << " -><- " << tempNode->getNodeName() << " <- Bottom" << endl;
					break;
				}
				else
				{
					cout << " -><- " << tempNode->getNodeName();
				}
			}
		}
		else
		{
			cout << " <- Bottom" << endl;
		}
	}

	tempNode = NULL;
}

//Function definition to overload <<.
ostream &operator<<(ostream &s, Stack<string>* myStack)
{
	myStack->printStack();

	return s;
}


#endif /* STACK_H_ */
